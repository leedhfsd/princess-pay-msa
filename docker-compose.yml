version: "3.7"
services:
  eureka-server:
    build:
      context: ./eureka-server
      dockerfile: Dockerfile
    container_name: eureka-server
    networks:
      - webnet
    restart: always

  api-gateway:
    build:
      context: ./api-gateway
      dockerfile: Dockerfile
    container_name: api-gateway
    ports:
      - "8765:8765"
    depends_on:
      - eureka-server
    networks:
      - webnet
    restart: always

  card:
    build:
      context: ./card
      dockerfile: Dockerfile
    container_name: card
    ports:
      - "${CARD_SERVICE_PORT}:8080"
    networks:
      - webnet
    depends_on:
      - eureka-server
      - api-gateway
      - card-mysql
    environment:
      - SPRING_PROFILES_ACTIVE=prod
      - SPRING_DATASOURCE_URL=jdbc:mysql://card-mysql:3306/card
      - SPRING_DATASOURCE_USERNAME=carduser
      - SPRING_DATASOURCE_PASSWORD=cardpass

  card-mysql:
    image: mysql:8.0
    container_name: card-mysql
    environment:
      - MYSQL_ROOT_PASSWORD=rootpassword
      - MYSQL_DATABASE=carddb
      - MYSQL_USER=carduser
      - MYSQL_PASSWORD=cardpass
    networks:
      - webnet
    ports:
      - "3306:3306"
    volumes:
      - card-db-data:/var/lib/mysql
    restart: always

  payment:
    build:
      context: ./payment
      dockerfile: Dockerfile
    container_name: payment
    ports:
      - "${PAYMENT_SERVICE_PORT}:8080"
    networks:
      - webnet
    depends_on:
      - eureka-server
      - api-gateway
      - payment-mysql
    environment:
      - SPRING_PROFILES_ACTIVE=prod
      - SPRING_DATASOURCE_URL=jdbc:mysql://payment-mysql:3306/payment
      - SPRING_DATASOURCE_USERNAME=paymentuser
      - SPRING_DATASOURCE_PASSWORD=paymentpass

  payment-mysql:
    image: mysql:8.0
    container_name: payment-mysql
    environment:
      - MYSQL_ROOT_PASSWORD=rootpassword
      - MYSQL_DATABASE=paymentdb
      - MYSQL_USER=paymentuser
      - MYSQL_PASSWORD=paymentpass
    networks:
      - webnet
    ports:
      - "3307:3306"
    volumes:
      - payment-db-data:/var/lib/mysql
    restart: always

  store:
    build:
      context: ./store
      dockerfile: Dockerfile
    container_name: store
    ports:
      - "${STORE_SERVICE_PORT}:8080"
    networks:
      - webnet
    depends_on:
      - eureka-server
      - api-gateway
      - store-mysql
    environment:
      - SPRING_PROFILES_ACTIVE=prod
      - SPRING_DATASOURCE_URL=jdbc:mysql://store-mysql:3306/store
      - SPRING_DATASOURCE_USERNAME=storeuser
      - SPRING_DATASOURCE_PASSWORD=storepass

  store-mysql:
    image: mysql:8.0
    container_name: store-mysql
    environment:
      - MYSQL_ROOT_PASSWORD=rootpassword
      - MYSQL_DATABASE=storedb
      - MYSQL_USER=storeuser
      - MYSQL_PASSWORD=storepass
    networks:
      - webnet
    ports:
      - "3308:3306"
    volumes:
      - store-db-data:/var/lib/mysql
    restart: always

  zookeeper:
    image: confluentinc/cp-zookeeper:latest
    container_name: zookeeper
    environment:
      - ZOOKEEPER_CLIENT_PORT=2181
      - ZOOKEEPER_TICK_TIME=2000
    ports:
      - "2181:2181"
    networks:
      - webnet
    restart: always

  kafka-broker-1:
    image: confluentinc/cp-kafka:latest
    container_name: kafka-broker-1
    depends_on:
      - zookeeper
    ports:
      - "9092:9092"
    environment:
      - KAFKA_BROKER_ID=1
      - KAFKA_ZOOKEEPER_CONNECT=zookeeper:2181
      - KAFKA_ADVERTISED_LISTENERS=PLAINTEXT://kafka-broker-1:9092
      - KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR=1
    networks:
      - webnet
    restart: always

  kafka-broker-2:
    image: confluentinc/cp-kafka:latest
    container_name: kafka-broker-2
    depends_on:
      - zookeeper
    ports:
      - "9093:9092"
    environment:
      - KAFKA_BROKER_ID=2
      - KAFKA_ZOOKEEPER_CONNECT=zookeeper:2181
      - KAFKA_ADVERTISED_LISTENERS=PLAINTEXT://kafka-broker-2:9093
      - KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR=1
    networks:
      - webnet
    restart: always

  kafka-broker-3:
    image: confluentinc/cp-kafka:latest
    container_name: kafka-broker-3
    depends_on:
      - zookeeper
    ports:
      - "9094:9092"
    environment:
      - KAFKA_BROKER_ID=3
      - KAFKA_ZOOKEEPER_CONNECT=zookeeper:2181
      - KAFKA_ADVERTISED_LISTENERS=PLAINTEXT://kafka-broker-3:9094
      - KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR=1
    networks:
      - webnet
    restart: always

  kafka-connect:
    image: debezium/connect:latest
    container_name: kafka-connect
    depends_on:
      - kafka-broker-1
      - kafka-broker-2
      - kafka-broker-3
    ports:
      - "8083:8083"
    environment:
      - BOOTSTRAP_SERVERS=kafka-broker-1:9092,kafka-broker-2:9093,kafka-broker-3:9094
      - GROUP_ID=1
      - CONFIG_STORAGE_TOPIC=kafka-connect-configs
      - OFFSET_STORAGE_TOPIC=kafka-connect-offsets
      - STATUS_STORAGE_TOPIC=kafka-connect-status
      - KEY_CONVERTER=org.apache.kafka.connect.json.JsonConverter
      - VALUE_CONVERTER=org.apache.kafka.connect.json.JsonConverter
      - CONNECT_KEY_CONVERTER_SCHEMAS_ENABLE=false
      - CONNECT_VALUE_CONVERTER_SCHEMAS_ENABLE=false
      - CONNECT_REST_ADVERTISED_HOST_NAME=kafka-connect
      - CONNECT_LOG4J_ROOT_LOGLEVEL=INFO
      - CONNECT_REST_PORT=8083
    networks:
      - webnet
    restart: always

  redis:
    container_name: redis
    image: redis
    ports:
      - "6379:6379"
    networks:
      - webnet
    volumes:
      - redis-data:/data
    restart: always

networks:
  webnet:
    driver: bridge

volumes:
  card-db-data:
  payment-db-data:
  store-db-data:
